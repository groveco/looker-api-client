# coding: utf-8

"""
ScheduledPlanApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class ScheduledPlanApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def all_scheduled_plans(self, **kwargs):
        """
        Get All Scheduled Plans
        ### Get All Scheduled Plans\n\nReturns all scheduled plans owned by the caller or given user.\n\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\n\n\nThe caller must have `see_schedules` permission to see other users' scheduled plans.\n\n\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.all_scheduled_plans(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int user_id: User Id (default is requesting user if not specified)
        :param str fields: Requested fields.
        :return: list[ScheduledPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'fields']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method all_scheduled_plans" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/scheduled_plans'.replace('{format}', 'json')
        path_params = {}

        query_params = {}
        if 'user_id' in params:
            query_params['user_id'] = params['user_id']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ScheduledPlan]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_scheduled_plan(self, **kwargs):
        """
        Create Scheduled Plan
        ### Create a Scheduled Plan\n\nCreate a scheduled plan to render a Look or Dashboard on a recurring schedule.\n\nThe queries that provide the data for the look or dashboard are run in the context of user account that owns the scheduled plan.\n\nAdmins can create scheduled plans on behalf of other users by specifying a user id.\n\nScheduled plan destinations must specify the data format to produce and send to the destination\n\nScheduled Plan Destination formats:\n\n| format | Description\n| :-----------: | :--- |\n| json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| xlsx | MS Excel spreadsheet\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n||\n\nValid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n\n\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_scheduled_plan(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ScheduledPlan body: Scheduled Plan
        :return: ScheduledPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_scheduled_plan" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/scheduled_plans'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ScheduledPlan',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def delete_scheduled_plan(self, scheduled_plan_id, **kwargs):
        """
        Delete Scheduled Plan
        ### Delete a Scheduled Plan\n\nNormal users can only delete their own scheduled plans.\nAdmins can delete other users' scheduled plans.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_scheduled_plan(scheduled_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int scheduled_plan_id: Scheduled Plan Id (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheduled_plan_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_scheduled_plan" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'scheduled_plan_id' is set
        if ('scheduled_plan_id' not in params) or (params['scheduled_plan_id'] is None):
            raise ValueError("Missing the required parameter `scheduled_plan_id` when calling `delete_scheduled_plan`")

        resource_path = '/scheduled_plans/{scheduled_plan_id}'.replace('{format}', 'json')
        path_params = {}
        if 'scheduled_plan_id' in params:
            path_params['scheduled_plan_id'] = params['scheduled_plan_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'DELETE',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def scheduled_plan(self, scheduled_plan_id, **kwargs):
        """
        Get Scheduled Plan
        ### Get Information About a Scheduled Plan\n\nAdmins can fetch information about other users' Scheduled Plans.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.scheduled_plan(scheduled_plan_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int scheduled_plan_id: Scheduled Plan Id (required)
        :param str fields: Requested fields.
        :return: ScheduledPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheduled_plan_id', 'fields']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scheduled_plan" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'scheduled_plan_id' is set
        if ('scheduled_plan_id' not in params) or (params['scheduled_plan_id'] is None):
            raise ValueError("Missing the required parameter `scheduled_plan_id` when calling `scheduled_plan`")

        resource_path = '/scheduled_plans/{scheduled_plan_id}'.replace('{format}', 'json')
        path_params = {}
        if 'scheduled_plan_id' in params:
            path_params['scheduled_plan_id'] = params['scheduled_plan_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ScheduledPlan',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def scheduled_plan_run_once(self, **kwargs):
        """
        Run Scheduled Plan Once
        ### Run a Scheduled Plan Immediately\n\nCreate a scheduled plan that runs only once, and immediately.\n\nThis can be useful for testing a Scheduled Plan before committing to a production schedule.\n\nAdmins can create scheduled plans on behalf of other users by specifying a user id.\n\nScheduled plan destinations must specify the data format to produce and send to the destination\n\nScheduled Plan Destination formats:\n\n| format | Description\n| :-----------: | :--- |\n| json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| xlsx | MS Excel spreadsheet\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n||\n\nValid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n\n\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.scheduled_plan_run_once(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ScheduledPlan body: Scheduled Plan
        :return: ScheduledPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scheduled_plan_run_once" % key
                )
            params[key] = val
        del params['kwargs']


        resource_path = '/scheduled_plans/run_once'.replace('{format}', 'json')
        path_params = {}

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ScheduledPlan',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def scheduled_plans_for_dashboard(self, dashboard_id, **kwargs):
        """
        Scheduled Plans for Dashboard
        ### Get Scheduled Plans for a Dashboard\n\nReturns all scheduled plans owned by the caller or given user, for a given dashboard.\n\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\n\n\nThe caller must have `see_schedules` permission to see other users' scheduled plans.\n\n\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.scheduled_plans_for_dashboard(dashboard_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int dashboard_id: Dashboard Id (required)
        :param int user_id: User Id (default is requesting user if not specified)
        :param str fields: Requested fields.
        :return: list[ScheduledPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'user_id', 'fields']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scheduled_plans_for_dashboard" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params) or (params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `scheduled_plans_for_dashboard`")

        resource_path = '/scheduled_plans/dashboard/{dashboard_id}'.replace('{format}', 'json')
        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']

        query_params = {}
        if 'user_id' in params:
            query_params['user_id'] = params['user_id']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ScheduledPlan]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def scheduled_plans_for_look(self, look_id, **kwargs):
        """
        Scheduled Plans for Look
        ### Get Scheduled Plans for a Look\n\nReturns all scheduled plans owned by the caller or given user, for a given look.\n\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\n\n\nThe caller must have `see_schedules` permission to see other users' scheduled plans.\n\n\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.scheduled_plans_for_look(look_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int look_id: Look Id (required)
        :param int user_id: User Id (default is requesting user if not specified)
        :param str fields: Requested fields.
        :return: list[ScheduledPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['look_id', 'user_id', 'fields']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scheduled_plans_for_look" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'look_id' is set
        if ('look_id' not in params) or (params['look_id'] is None):
            raise ValueError("Missing the required parameter `look_id` when calling `scheduled_plans_for_look`")

        resource_path = '/scheduled_plans/look/{look_id}'.replace('{format}', 'json')
        path_params = {}
        if 'look_id' in params:
            path_params['look_id'] = params['look_id']

        query_params = {}
        if 'user_id' in params:
            query_params['user_id'] = params['user_id']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ScheduledPlan]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def scheduled_plans_for_lookml_dashboard(self, lookml_dashboard_id, **kwargs):
        """
        Scheduled Plans for LookML Dashboard
        ### Get Scheduled Plans for a LookML Dashboard\n\nReturns all scheduled plans owned by the caller or given user, for a given LookML dashboard.\n\nIf no user_id is provided, this function returns the scheduled plans owned by the caller.\n\n\nThe caller must have `see_schedules` permission to see other users' scheduled plans.\n\n\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.scheduled_plans_for_lookml_dashboard(lookml_dashboard_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int lookml_dashboard_id: LookML Dashboard Id (required)
        :param int user_id: User Id (default is requesting user if not specified)
        :param str fields: Requested fields.
        :return: list[ScheduledPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['lookml_dashboard_id', 'user_id', 'fields']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scheduled_plans_for_lookml_dashboard" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'lookml_dashboard_id' is set
        if ('lookml_dashboard_id' not in params) or (params['lookml_dashboard_id'] is None):
            raise ValueError("Missing the required parameter `lookml_dashboard_id` when calling `scheduled_plans_for_lookml_dashboard`")

        resource_path = '/scheduled_plans/lookml_dashboard/{lookml_dashboard_id}'.replace('{format}', 'json')
        path_params = {}
        if 'lookml_dashboard_id' in params:
            path_params['lookml_dashboard_id'] = params['lookml_dashboard_id']

        query_params = {}
        if 'user_id' in params:
            query_params['user_id'] = params['user_id']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ScheduledPlan]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def scheduled_plans_for_space(self, space_id, **kwargs):
        """
        Scheduled Plans for Space
        ### Get Scheduled Plans for a Space\n\nReturns scheduled plans owned by the caller for a given space id.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.scheduled_plans_for_space(space_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int space_id: Space Id (required)
        :param str fields: Requested fields.
        :return: list[ScheduledPlan]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['space_id', 'fields']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method scheduled_plans_for_space" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'space_id' is set
        if ('space_id' not in params) or (params['space_id'] is None):
            raise ValueError("Missing the required parameter `space_id` when calling `scheduled_plans_for_space`")

        resource_path = '/scheduled_plans/space/{space_id}'.replace('{format}', 'json')
        path_params = {}
        if 'space_id' in params:
            path_params['space_id'] = params['space_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='list[ScheduledPlan]',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def update_scheduled_plan(self, scheduled_plan_id, body, **kwargs):
        """
        Update Scheduled Plan
        ### Update a Scheduled Plan\n\nAdmins can update other users' Scheduled Plans.\n\nNote: Any scheduled plan destinations specified in an update will **replace** all scheduled plan destinations\ncurrently defined for the scheduled plan.\n\nFor Example: If a scheduled plan has destinations A, B, and C, and you call update on this scheduled plan\nspecifying only B in the destinations, then destinations A and C will be deleted by the update.\n\nScheduled plan destinations must specify the data format to produce and send to the destination\n\nScheduled Plan Destination formats:\n\n| format | Description\n| :-----------: | :--- |\n| json | A JSON object containing a `data` property which contains an array of JSON objects, one per row. No metadata.\n| json_detail | Row data plus metadata describing the fields, pivots, table calcs, and other aspects of the query\n| inline_json | Same as the JSON format, except that the `data` property is a string containing JSON-escaped row data. Additional properties describe the data operation. This format is primarily used to send data to web hooks so that the web hook doesn't have to re-encode the JSON row data in order to pass it on to its ultimate destination.\n| csv | Comma separated values with a header\n| txt | Tab separated values with a header\n| html | Simple html\n| xlsx | MS Excel spreadsheet\n| wysiwyg_pdf | Dashboard rendered in a tiled layout to produce a PDF document\n| assembled_pdf | Dashboard rendered in a single column layout to produce a PDF document\n| wysiwyg_png | Dashboard rendered in a tiled layout to produce a PNG image\n||\n\nValid formats vary by destination type and source object. `wysiwyg_pdf` is only valid for dashboards, for example.\n\n\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_scheduled_plan(scheduled_plan_id, body, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int scheduled_plan_id: Scheduled Plan Id (required)
        :param ScheduledPlan body: Scheduled Plan (required)
        :return: ScheduledPlan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scheduled_plan_id', 'body']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_scheduled_plan" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'scheduled_plan_id' is set
        if ('scheduled_plan_id' not in params) or (params['scheduled_plan_id'] is None):
            raise ValueError("Missing the required parameter `scheduled_plan_id` when calling `update_scheduled_plan`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `update_scheduled_plan`")

        resource_path = '/scheduled_plans/{scheduled_plan_id}'.replace('{format}', 'json')
        path_params = {}
        if 'scheduled_plan_id' in params:
            path_params['scheduled_plan_id'] = params['scheduled_plan_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'PATCH',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='ScheduledPlan',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
