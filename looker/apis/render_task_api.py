# coding: utf-8

"""
RenderTaskApi.py
Copyright 2016 SmartBear Software

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

from __future__ import absolute_import

import sys
import os

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class RenderTaskApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def create_dashboard_render_task(self, dashboard_id, result_format, body, width, height, **kwargs):
        """
        Create Dashboard Render Task
        ### Create a new task to render a dashboard to a document or image.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_dashboard_render_task(dashboard_id, result_format, body, width, height, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int dashboard_id: Id of dashboard to render (required)
        :param str result_format: Output type: pdf, png, or jpg (required)
        :param CreateDashboardRenderTask body: Dashboard render task parameters (required)
        :param int width: Output width in pixels (required)
        :param int height: Output height in pixels (required)
        :param str fields: Requested fields.
        :param str pdf_paper_size: Paper size for pdf
        :param bool pdf_landscape: Whether to render pdf in landscape
        :return: RenderTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'result_format', 'body', 'width', 'height', 'fields', 'pdf_paper_size', 'pdf_landscape']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dashboard_render_task" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params) or (params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `create_dashboard_render_task`")
        # verify the required parameter 'result_format' is set
        if ('result_format' not in params) or (params['result_format'] is None):
            raise ValueError("Missing the required parameter `result_format` when calling `create_dashboard_render_task`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_dashboard_render_task`")
        # verify the required parameter 'width' is set
        if ('width' not in params) or (params['width'] is None):
            raise ValueError("Missing the required parameter `width` when calling `create_dashboard_render_task`")
        # verify the required parameter 'height' is set
        if ('height' not in params) or (params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `create_dashboard_render_task`")

        resource_path = '/render_tasks/dashboards/{dashboard_id}/{result_format}'.replace('{format}', 'json')
        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']
        if 'result_format' in params:
            path_params['result_format'] = params['result_format']

        query_params = {}
        if 'width' in params:
            query_params['width'] = params['width']
        if 'height' in params:
            query_params['height'] = params['height']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'pdf_paper_size' in params:
            query_params['pdf_paper_size'] = params['pdf_paper_size']
        if 'pdf_landscape' in params:
            query_params['pdf_landscape'] = params['pdf_landscape']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RenderTask',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_look_render_task(self, look_id, result_format, width, height, **kwargs):
        """
        Create Look Render Task
        ### Create a new task to render a look to an image.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_look_render_task(look_id, result_format, width, height, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int look_id: Id of look to render (required)
        :param str result_format: Output type: png, or jpg (required)
        :param int width: Output width in pixels (required)
        :param int height: Output height in pixels (required)
        :param str fields: Requested fields.
        :return: RenderTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['look_id', 'result_format', 'width', 'height', 'fields']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_look_render_task" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'look_id' is set
        if ('look_id' not in params) or (params['look_id'] is None):
            raise ValueError("Missing the required parameter `look_id` when calling `create_look_render_task`")
        # verify the required parameter 'result_format' is set
        if ('result_format' not in params) or (params['result_format'] is None):
            raise ValueError("Missing the required parameter `result_format` when calling `create_look_render_task`")
        # verify the required parameter 'width' is set
        if ('width' not in params) or (params['width'] is None):
            raise ValueError("Missing the required parameter `width` when calling `create_look_render_task`")
        # verify the required parameter 'height' is set
        if ('height' not in params) or (params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `create_look_render_task`")

        resource_path = '/render_tasks/looks/{look_id}/{result_format}'.replace('{format}', 'json')
        path_params = {}
        if 'look_id' in params:
            path_params['look_id'] = params['look_id']
        if 'result_format' in params:
            path_params['result_format'] = params['result_format']

        query_params = {}
        if 'width' in params:
            query_params['width'] = params['width']
        if 'height' in params:
            query_params['height'] = params['height']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RenderTask',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_lookml_dashboard_render_task(self, dashboard_id, result_format, body, width, height, **kwargs):
        """
        Create Lookml Dashboard Render Task
        ### Create a new task to render a lookml dashboard to a document or image.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_lookml_dashboard_render_task(dashboard_id, result_format, body, width, height, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str dashboard_id: Id of lookml dashboard to render (required)
        :param str result_format: Output type: pdf, png, or jpg (required)
        :param CreateDashboardRenderTask body: Dashboard render task parameters (required)
        :param int width: Output width in pixels (required)
        :param int height: Output height in pixels (required)
        :param str fields: Requested fields.
        :param str pdf_paper_size: Paper size for pdf
        :param bool pdf_landscape: Whether to render pdf in landscape
        :return: RenderTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dashboard_id', 'result_format', 'body', 'width', 'height', 'fields', 'pdf_paper_size', 'pdf_landscape']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_lookml_dashboard_render_task" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'dashboard_id' is set
        if ('dashboard_id' not in params) or (params['dashboard_id'] is None):
            raise ValueError("Missing the required parameter `dashboard_id` when calling `create_lookml_dashboard_render_task`")
        # verify the required parameter 'result_format' is set
        if ('result_format' not in params) or (params['result_format'] is None):
            raise ValueError("Missing the required parameter `result_format` when calling `create_lookml_dashboard_render_task`")
        # verify the required parameter 'body' is set
        if ('body' not in params) or (params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_lookml_dashboard_render_task`")
        # verify the required parameter 'width' is set
        if ('width' not in params) or (params['width'] is None):
            raise ValueError("Missing the required parameter `width` when calling `create_lookml_dashboard_render_task`")
        # verify the required parameter 'height' is set
        if ('height' not in params) or (params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `create_lookml_dashboard_render_task`")

        resource_path = '/render_tasks/lookml_dashboards/{dashboard_id}/{result_format}'.replace('{format}', 'json')
        path_params = {}
        if 'dashboard_id' in params:
            path_params['dashboard_id'] = params['dashboard_id']
        if 'result_format' in params:
            path_params['result_format'] = params['result_format']

        query_params = {}
        if 'width' in params:
            query_params['width'] = params['width']
        if 'height' in params:
            query_params['height'] = params['height']
        if 'fields' in params:
            query_params['fields'] = params['fields']
        if 'pdf_paper_size' in params:
            query_params['pdf_paper_size'] = params['pdf_paper_size']
        if 'pdf_landscape' in params:
            query_params['pdf_landscape'] = params['pdf_landscape']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RenderTask',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def create_query_render_task(self, query_id, result_format, width, height, **kwargs):
        """
        Create Query Render Task
        ### Create a new task to render an existing query to an image.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_query_render_task(query_id, result_format, width, height, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int query_id: Id of the query to render (required)
        :param str result_format: Output type: png or jpg (required)
        :param int width: Output width in pixels (required)
        :param int height: Output height in pixels (required)
        :param str fields: Requested fields.
        :return: RenderTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query_id', 'result_format', 'width', 'height', 'fields']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_query_render_task" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'query_id' is set
        if ('query_id' not in params) or (params['query_id'] is None):
            raise ValueError("Missing the required parameter `query_id` when calling `create_query_render_task`")
        # verify the required parameter 'result_format' is set
        if ('result_format' not in params) or (params['result_format'] is None):
            raise ValueError("Missing the required parameter `result_format` when calling `create_query_render_task`")
        # verify the required parameter 'width' is set
        if ('width' not in params) or (params['width'] is None):
            raise ValueError("Missing the required parameter `width` when calling `create_query_render_task`")
        # verify the required parameter 'height' is set
        if ('height' not in params) or (params['height'] is None):
            raise ValueError("Missing the required parameter `height` when calling `create_query_render_task`")

        resource_path = '/render_tasks/queries/{query_id}/{result_format}'.replace('{format}', 'json')
        path_params = {}
        if 'query_id' in params:
            path_params['query_id'] = params['query_id']
        if 'result_format' in params:
            path_params['result_format'] = params['result_format']

        query_params = {}
        if 'width' in params:
            query_params['width'] = params['width']
        if 'height' in params:
            query_params['height'] = params['height']
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'POST',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RenderTask',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def render_task(self, render_task_id, **kwargs):
        """
        Get Render Task
        ### Get information about a render task.\n\nReturns a render task object.\nTo check the status of a render task, pass the render_task.id to [Get Render Task](#!/RenderTask/get_render_task).\nOnce the render task is complete, you can download the resulting document or image using [Get Render Task Results](#!/RenderTask/get_render_task_results).\n\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.render_task(render_task_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str render_task_id: Id of render task (required)
        :param str fields: Requested fields.
        :return: RenderTask
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['render_task_id', 'fields']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method render_task" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'render_task_id' is set
        if ('render_task_id' not in params) or (params['render_task_id'] is None):
            raise ValueError("Missing the required parameter `render_task_id` when calling `render_task`")

        resource_path = '/render_tasks/{render_task_id}'.replace('{format}', 'json')
        path_params = {}
        if 'render_task_id' in params:
            path_params['render_task_id'] = params['render_task_id']

        query_params = {}
        if 'fields' in params:
            query_params['fields'] = params['fields']

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='RenderTask',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response

    def render_task_results(self, render_task_id, **kwargs):
        """
        Render Task Results
        ### Get the document or image produced by a completed render task.\n\nReturns `102 Processing` if the render task has not completed.\n

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.render_task_results(render_task_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str render_task_id: Id of render task (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['render_task_id']
        all_params.append('callback')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method render_task_results" % key
                )
            params[key] = val
        del params['kwargs']

        # verify the required parameter 'render_task_id' is set
        if ('render_task_id' not in params) or (params['render_task_id'] is None):
            raise ValueError("Missing the required parameter `render_task_id` when calling `render_task_results`")

        resource_path = '/render_tasks/{render_task_id}/results'.replace('{format}', 'json')
        path_params = {}
        if 'render_task_id' in params:
            path_params['render_task_id'] = params['render_task_id']

        query_params = {}

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None

        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['image/jpeg', 'image/png', 'application/pdf'])
        if not header_params['Accept']:
            del header_params['Accept']

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        response = self.api_client.call_api(resource_path, 'GET',
                                            path_params,
                                            query_params,
                                            header_params,
                                            body=body_params,
                                            post_params=form_params,
                                            files=local_var_files,
                                            response_type='str',
                                            auth_settings=auth_settings,
                                            callback=params.get('callback'))
        return response
