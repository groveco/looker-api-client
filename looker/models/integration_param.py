# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class IntegrationParam(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        IntegrationParam - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'label': 'str',
            'description': 'str',
            'required': 'bool',
            'has_value': 'bool',
            'value': 'str',
            'user_attribute_name': 'str',
            'sensitive': 'bool',
            'per_user': 'bool'
        }

        self.attribute_map = {
            'name': 'name',
            'label': 'label',
            'description': 'description',
            'required': 'required',
            'has_value': 'has_value',
            'value': 'value',
            'user_attribute_name': 'user_attribute_name',
            'sensitive': 'sensitive',
            'per_user': 'per_user'
        }

        self._name = None
        self._label = None
        self._description = None
        self._required = None
        self._has_value = None
        self._value = None
        self._user_attribute_name = None
        self._sensitive = None
        self._per_user = None

    @property
    def name(self):
        """
        Gets the name of this IntegrationParam.
        Name of the parameter.

        :return: The name of this IntegrationParam.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this IntegrationParam.
        Name of the parameter.

        :param name: The name of this IntegrationParam.
        :type: str
        """
        self._name = name

    @property
    def label(self):
        """
        Gets the label of this IntegrationParam.
        Label of the parameter.

        :return: The label of this IntegrationParam.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this IntegrationParam.
        Label of the parameter.

        :param label: The label of this IntegrationParam.
        :type: str
        """
        self._label = label

    @property
    def description(self):
        """
        Gets the description of this IntegrationParam.
        Short description of the parameter.

        :return: The description of this IntegrationParam.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this IntegrationParam.
        Short description of the parameter.

        :param description: The description of this IntegrationParam.
        :type: str
        """
        self._description = description

    @property
    def required(self):
        """
        Gets the required of this IntegrationParam.
        Whether the parameter is required to be set to use the destination. If unspecified, this defaults to false.

        :return: The required of this IntegrationParam.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this IntegrationParam.
        Whether the parameter is required to be set to use the destination. If unspecified, this defaults to false.

        :param required: The required of this IntegrationParam.
        :type: bool
        """
        self._required = required

    @property
    def has_value(self):
        """
        Gets the has_value of this IntegrationParam.
        Whether the parameter has a value set.

        :return: The has_value of this IntegrationParam.
        :rtype: bool
        """
        return self._has_value

    @has_value.setter
    def has_value(self, has_value):
        """
        Sets the has_value of this IntegrationParam.
        Whether the parameter has a value set.

        :param has_value: The has_value of this IntegrationParam.
        :type: bool
        """
        self._has_value = has_value

    @property
    def value(self):
        """
        Gets the value of this IntegrationParam.
        The current value of the parameter. Always null if the value is sensitive. When writing, null values will be ignored. Set the value to an empty string to clear it.

        :return: The value of this IntegrationParam.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this IntegrationParam.
        The current value of the parameter. Always null if the value is sensitive. When writing, null values will be ignored. Set the value to an empty string to clear it.

        :param value: The value of this IntegrationParam.
        :type: str
        """
        self._value = value

    @property
    def user_attribute_name(self):
        """
        Gets the user_attribute_name of this IntegrationParam.
        When present, the param's value comes from this user attribute instead of the 'value' parameter. Set to null to use the 'value'.

        :return: The user_attribute_name of this IntegrationParam.
        :rtype: str
        """
        return self._user_attribute_name

    @user_attribute_name.setter
    def user_attribute_name(self, user_attribute_name):
        """
        Sets the user_attribute_name of this IntegrationParam.
        When present, the param's value comes from this user attribute instead of the 'value' parameter. Set to null to use the 'value'.

        :param user_attribute_name: The user_attribute_name of this IntegrationParam.
        :type: str
        """
        self._user_attribute_name = user_attribute_name

    @property
    def sensitive(self):
        """
        Gets the sensitive of this IntegrationParam.
        Whether the parameter contains sensitive data like API credentials. If unspecified, this defaults to true.

        :return: The sensitive of this IntegrationParam.
        :rtype: bool
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive):
        """
        Sets the sensitive of this IntegrationParam.
        Whether the parameter contains sensitive data like API credentials. If unspecified, this defaults to true.

        :param sensitive: The sensitive of this IntegrationParam.
        :type: bool
        """
        self._sensitive = sensitive

    @property
    def per_user(self):
        """
        Gets the per_user of this IntegrationParam.
        When true, this parameter must be assigned to a user attribute in the admin panel (instead of a constant value), and that value may be updated by the user as part of the integration flow.

        :return: The per_user of this IntegrationParam.
        :rtype: bool
        """
        return self._per_user

    @per_user.setter
    def per_user(self, per_user):
        """
        Sets the per_user of this IntegrationParam.
        When true, this parameter must be assigned to a user attribute in the admin panel (instead of a constant value), and that value may be updated by the user as part of the integration flow.

        :param per_user: The per_user of this IntegrationParam.
        :type: bool
        """
        self._per_user = per_user

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

