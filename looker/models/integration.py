# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class Integration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        Integration - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'id': 'str',
            'integration_hub_id': 'int',
            'label': 'str',
            'description': 'str',
            'enabled': 'bool',
            'params': 'list[IntegrationParam]',
            'supported_formats': 'list[str]',
            'supported_action_types': 'list[str]',
            'supported_formattings': 'list[str]',
            'supported_visualization_formattings': 'list[str]',
            'supported_download_settings': 'list[str]',
            'icon_url': 'str',
            'required_fields': 'list[IntegrationRequiredField]',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'id': 'id',
            'integration_hub_id': 'integration_hub_id',
            'label': 'label',
            'description': 'description',
            'enabled': 'enabled',
            'params': 'params',
            'supported_formats': 'supported_formats',
            'supported_action_types': 'supported_action_types',
            'supported_formattings': 'supported_formattings',
            'supported_visualization_formattings': 'supported_visualization_formattings',
            'supported_download_settings': 'supported_download_settings',
            'icon_url': 'icon_url',
            'required_fields': 'required_fields',
            'can': 'can'
        }

        self._id = None
        self._integration_hub_id = None
        self._label = None
        self._description = None
        self._enabled = None
        self._params = None
        self._supported_formats = None
        self._supported_action_types = None
        self._supported_formattings = None
        self._supported_visualization_formattings = None
        self._supported_download_settings = None
        self._icon_url = None
        self._required_fields = None
        self._can = None

    @property
    def id(self):
        """
        Gets the id of this Integration.
        ID of the integration.

        :return: The id of this Integration.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Integration.
        ID of the integration.

        :param id: The id of this Integration.
        :type: str
        """
        self._id = id

    @property
    def integration_hub_id(self):
        """
        Gets the integration_hub_id of this Integration.
        ID of the integration hub.

        :return: The integration_hub_id of this Integration.
        :rtype: int
        """
        return self._integration_hub_id

    @integration_hub_id.setter
    def integration_hub_id(self, integration_hub_id):
        """
        Sets the integration_hub_id of this Integration.
        ID of the integration hub.

        :param integration_hub_id: The integration_hub_id of this Integration.
        :type: int
        """
        self._integration_hub_id = integration_hub_id

    @property
    def label(self):
        """
        Gets the label of this Integration.
        Label for the integration.

        :return: The label of this Integration.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this Integration.
        Label for the integration.

        :param label: The label of this Integration.
        :type: str
        """
        self._label = label

    @property
    def description(self):
        """
        Gets the description of this Integration.
        Description of the integration.

        :return: The description of this Integration.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Integration.
        Description of the integration.

        :param description: The description of this Integration.
        :type: str
        """
        self._description = description

    @property
    def enabled(self):
        """
        Gets the enabled of this Integration.
        Whether the integration is available to users.

        :return: The enabled of this Integration.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """
        Sets the enabled of this Integration.
        Whether the integration is available to users.

        :param enabled: The enabled of this Integration.
        :type: bool
        """
        self._enabled = enabled

    @property
    def params(self):
        """
        Gets the params of this Integration.
        Array of params for the integration.

        :return: The params of this Integration.
        :rtype: list[IntegrationParam]
        """
        return self._params

    @params.setter
    def params(self, params):
        """
        Sets the params of this Integration.
        Array of params for the integration.

        :param params: The params of this Integration.
        :type: list[IntegrationParam]
        """
        self._params = params

    @property
    def supported_formats(self):
        """
        Gets the supported_formats of this Integration.
        A list of data formats the integration supports. If unspecified, this will default to [\"txt\", \"csv\", \"inline_json\", \"json\", \"json_detail\", \"json_detail_lite_stream\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\", \"csv_zip\"]. Valid values are: \"txt\", \"csv\", \"inline_json\", \"json\", \"json_detail\", \"json_detail_lite_stream\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\", \"csv_zip\".

        :return: The supported_formats of this Integration.
        :rtype: list[str]
        """
        return self._supported_formats

    @supported_formats.setter
    def supported_formats(self, supported_formats):
        """
        Sets the supported_formats of this Integration.
        A list of data formats the integration supports. If unspecified, this will default to [\"txt\", \"csv\", \"inline_json\", \"json\", \"json_detail\", \"json_detail_lite_stream\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\", \"csv_zip\"]. Valid values are: \"txt\", \"csv\", \"inline_json\", \"json\", \"json_detail\", \"json_detail_lite_stream\", \"xlsx\", \"html\", \"wysiwyg_pdf\", \"assembled_pdf\", \"wysiwyg_png\", \"csv_zip\".

        :param supported_formats: The supported_formats of this Integration.
        :type: list[str]
        """
        self._supported_formats = supported_formats

    @property
    def supported_action_types(self):
        """
        Gets the supported_action_types of this Integration.
        A list of action types the integration supports. Valid values are: \"cell\", \"query\", \"dashboard\".

        :return: The supported_action_types of this Integration.
        :rtype: list[str]
        """
        return self._supported_action_types

    @supported_action_types.setter
    def supported_action_types(self, supported_action_types):
        """
        Sets the supported_action_types of this Integration.
        A list of action types the integration supports. Valid values are: \"cell\", \"query\", \"dashboard\".

        :param supported_action_types: The supported_action_types of this Integration.
        :type: list[str]
        """
        self._supported_action_types = supported_action_types

    @property
    def supported_formattings(self):
        """
        Gets the supported_formattings of this Integration.
        A list of formatting options the integration supports. If unspecified, this will default to [\"formatted\", \"unformatted\"]. Valid values are: \"formatted\", \"unformatted\".

        :return: The supported_formattings of this Integration.
        :rtype: list[str]
        """
        return self._supported_formattings

    @supported_formattings.setter
    def supported_formattings(self, supported_formattings):
        """
        Sets the supported_formattings of this Integration.
        A list of formatting options the integration supports. If unspecified, this will default to [\"formatted\", \"unformatted\"]. Valid values are: \"formatted\", \"unformatted\".

        :param supported_formattings: The supported_formattings of this Integration.
        :type: list[str]
        """
        self._supported_formattings = supported_formattings

    @property
    def supported_visualization_formattings(self):
        """
        Gets the supported_visualization_formattings of this Integration.
        A list of visualization formatting options the integration supports. If unspecified, this will default to [\"apply\", \"noapply\"]. Valid values are: \"apply\", \"noapply\".

        :return: The supported_visualization_formattings of this Integration.
        :rtype: list[str]
        """
        return self._supported_visualization_formattings

    @supported_visualization_formattings.setter
    def supported_visualization_formattings(self, supported_visualization_formattings):
        """
        Sets the supported_visualization_formattings of this Integration.
        A list of visualization formatting options the integration supports. If unspecified, this will default to [\"apply\", \"noapply\"]. Valid values are: \"apply\", \"noapply\".

        :param supported_visualization_formattings: The supported_visualization_formattings of this Integration.
        :type: list[str]
        """
        self._supported_visualization_formattings = supported_visualization_formattings

    @property
    def supported_download_settings(self):
        """
        Gets the supported_download_settings of this Integration.
        A list of all the download mechanisms the integration supports. The order is undefined: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this will default to [\"push\"]. Valid values are: \"push\", \"url\".

        :return: The supported_download_settings of this Integration.
        :rtype: list[str]
        """
        return self._supported_download_settings

    @supported_download_settings.setter
    def supported_download_settings(self, supported_download_settings):
        """
        Sets the supported_download_settings of this Integration.
        A list of all the download mechanisms the integration supports. The order is undefined: Looker will select the most appropriate supported download mechanism for a given query. The integration must ensure it can handle any of the mechanisms it claims to support. If unspecified, this will default to [\"push\"]. Valid values are: \"push\", \"url\".

        :param supported_download_settings: The supported_download_settings of this Integration.
        :type: list[str]
        """
        self._supported_download_settings = supported_download_settings

    @property
    def icon_url(self):
        """
        Gets the icon_url of this Integration.
        URL to an icon for the integration.

        :return: The icon_url of this Integration.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url):
        """
        Sets the icon_url of this Integration.
        URL to an icon for the integration.

        :param icon_url: The icon_url of this Integration.
        :type: str
        """
        self._icon_url = icon_url

    @property
    def required_fields(self):
        """
        Gets the required_fields of this Integration.
        A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field. If unspecified, no fields will be required.

        :return: The required_fields of this Integration.
        :rtype: list[IntegrationRequiredField]
        """
        return self._required_fields

    @required_fields.setter
    def required_fields(self, required_fields):
        """
        Sets the required_fields of this Integration.
        A list of descriptions of required fields that this integration is compatible with. If there are multiple entries in this list, the integration requires more than one field. If unspecified, no fields will be required.

        :param required_fields: The required_fields of this Integration.
        :type: list[IntegrationRequiredField]
        """
        self._required_fields = required_fields

    @property
    def can(self):
        """
        Gets the can of this Integration.
        Operations the current user is able to perform on this object

        :return: The can of this Integration.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this Integration.
        Operations the current user is able to perform on this object

        :param can: The can of this Integration.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

