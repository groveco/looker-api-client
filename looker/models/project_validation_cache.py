# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ProjectValidationCache(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ProjectValidationCache - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'errors': 'list[ProjectError]',
            'project_digest': 'str',
            'models_not_validated': 'list[ModelsNotValidated]',
            'stale': 'bool'
        }

        self.attribute_map = {
            'errors': 'errors',
            'project_digest': 'project_digest',
            'models_not_validated': 'models_not_validated',
            'stale': 'stale'
        }

        self._errors = None
        self._project_digest = None
        self._models_not_validated = None
        self._stale = None

    @property
    def errors(self):
        """
        Gets the errors of this ProjectValidationCache.
        A list of project errors

        :return: The errors of this ProjectValidationCache.
        :rtype: list[ProjectError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """
        Sets the errors of this ProjectValidationCache.
        A list of project errors

        :param errors: The errors of this ProjectValidationCache.
        :type: list[ProjectError]
        """
        self._errors = errors

    @property
    def project_digest(self):
        """
        Gets the project_digest of this ProjectValidationCache.
        A hash value computed from the project's current state

        :return: The project_digest of this ProjectValidationCache.
        :rtype: str
        """
        return self._project_digest

    @project_digest.setter
    def project_digest(self, project_digest):
        """
        Sets the project_digest of this ProjectValidationCache.
        A hash value computed from the project's current state

        :param project_digest: The project_digest of this ProjectValidationCache.
        :type: str
        """
        self._project_digest = project_digest

    @property
    def models_not_validated(self):
        """
        Gets the models_not_validated of this ProjectValidationCache.
        A list of models which were not fully validated

        :return: The models_not_validated of this ProjectValidationCache.
        :rtype: list[ModelsNotValidated]
        """
        return self._models_not_validated

    @models_not_validated.setter
    def models_not_validated(self, models_not_validated):
        """
        Sets the models_not_validated of this ProjectValidationCache.
        A list of models which were not fully validated

        :param models_not_validated: The models_not_validated of this ProjectValidationCache.
        :type: list[ModelsNotValidated]
        """
        self._models_not_validated = models_not_validated

    @property
    def stale(self):
        """
        Gets the stale of this ProjectValidationCache.
        If true, the cached project validation results are no longer accurate because the project has changed since the cached results were calculated

        :return: The stale of this ProjectValidationCache.
        :rtype: bool
        """
        return self._stale

    @stale.setter
    def stale(self, stale):
        """
        Sets the stale of this ProjectValidationCache.
        If true, the cached project validation results are no longer accurate because the project has changed since the cached results were calculated

        :param stale: The stale of this ProjectValidationCache.
        :type: bool
        """
        self._stale = stale

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

