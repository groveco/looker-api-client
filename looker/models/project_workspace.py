# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ProjectWorkspace(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ProjectWorkspace - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'project_id': 'str',
            'workspace_id': 'str',
            'git_status': 'str',
            'git_head': 'str',
            'git_branch': 'GitBranch',
            'lookml_type': 'str',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'project_id': 'project_id',
            'workspace_id': 'workspace_id',
            'git_status': 'git_status',
            'git_head': 'git_head',
            'git_branch': 'git_branch',
            'lookml_type': 'lookml_type',
            'can': 'can'
        }

        self._project_id = None
        self._workspace_id = None
        self._git_status = None
        self._git_head = None
        self._git_branch = None
        self._lookml_type = None
        self._can = None

    @property
    def project_id(self):
        """
        Gets the project_id of this ProjectWorkspace.
        The id of the project

        :return: The project_id of this ProjectWorkspace.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this ProjectWorkspace.
        The id of the project

        :param project_id: The project_id of this ProjectWorkspace.
        :type: str
        """
        self._project_id = project_id

    @property
    def workspace_id(self):
        """
        Gets the workspace_id of this ProjectWorkspace.
        The id of the local workspace containing the project files

        :return: The workspace_id of this ProjectWorkspace.
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """
        Sets the workspace_id of this ProjectWorkspace.
        The id of the local workspace containing the project files

        :param workspace_id: The workspace_id of this ProjectWorkspace.
        :type: str
        """
        self._workspace_id = workspace_id

    @property
    def git_status(self):
        """
        Gets the git_status of this ProjectWorkspace.
        The status of the local git directory

        :return: The git_status of this ProjectWorkspace.
        :rtype: str
        """
        return self._git_status

    @git_status.setter
    def git_status(self, git_status):
        """
        Sets the git_status of this ProjectWorkspace.
        The status of the local git directory

        :param git_status: The git_status of this ProjectWorkspace.
        :type: str
        """
        self._git_status = git_status

    @property
    def git_head(self):
        """
        Gets the git_head of this ProjectWorkspace.
        Git head revision name

        :return: The git_head of this ProjectWorkspace.
        :rtype: str
        """
        return self._git_head

    @git_head.setter
    def git_head(self, git_head):
        """
        Sets the git_head of this ProjectWorkspace.
        Git head revision name

        :param git_head: The git_head of this ProjectWorkspace.
        :type: str
        """
        self._git_head = git_head

    @property
    def git_branch(self):
        """
        Gets the git_branch of this ProjectWorkspace.
        GitBranch

        :return: The git_branch of this ProjectWorkspace.
        :rtype: GitBranch
        """
        return self._git_branch

    @git_branch.setter
    def git_branch(self, git_branch):
        """
        Sets the git_branch of this ProjectWorkspace.
        GitBranch

        :param git_branch: The git_branch of this ProjectWorkspace.
        :type: GitBranch
        """
        self._git_branch = git_branch

    @property
    def lookml_type(self):
        """
        Gets the lookml_type of this ProjectWorkspace.
        The lookml syntax used by all files in this project

        :return: The lookml_type of this ProjectWorkspace.
        :rtype: str
        """
        return self._lookml_type

    @lookml_type.setter
    def lookml_type(self, lookml_type):
        """
        Sets the lookml_type of this ProjectWorkspace.
        The lookml syntax used by all files in this project

        :param lookml_type: The lookml_type of this ProjectWorkspace.
        :type: str
        """
        self._lookml_type = lookml_type

    @property
    def can(self):
        """
        Gets the can of this ProjectWorkspace.
        Operations the current user is able to perform on this object

        :return: The can of this ProjectWorkspace.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this ProjectWorkspace.
        Operations the current user is able to perform on this object

        :param can: The can of this ProjectWorkspace.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

