# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class DataActionFormField(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        DataActionFormField - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'name': 'str',
            'label': 'str',
            'description': 'str',
            'type': 'str',
            'default': 'str',
            'oauth_url': 'str',
            'required': 'bool',
            'options': 'list[DataActionFormSelectOption]'
        }

        self.attribute_map = {
            'name': 'name',
            'label': 'label',
            'description': 'description',
            'type': 'type',
            'default': 'default',
            'oauth_url': 'oauth_url',
            'required': 'required',
            'options': 'options'
        }

        self._name = None
        self._label = None
        self._description = None
        self._type = None
        self._default = None
        self._oauth_url = None
        self._required = None
        self._options = None

    @property
    def name(self):
        """
        Gets the name of this DataActionFormField.
        Name

        :return: The name of this DataActionFormField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this DataActionFormField.
        Name

        :param name: The name of this DataActionFormField.
        :type: str
        """
        self._name = name

    @property
    def label(self):
        """
        Gets the label of this DataActionFormField.
        Human-readable label

        :return: The label of this DataActionFormField.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """
        Sets the label of this DataActionFormField.
        Human-readable label

        :param label: The label of this DataActionFormField.
        :type: str
        """
        self._label = label

    @property
    def description(self):
        """
        Gets the description of this DataActionFormField.
        Description of field

        :return: The description of this DataActionFormField.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this DataActionFormField.
        Description of field

        :param description: The description of this DataActionFormField.
        :type: str
        """
        self._description = description

    @property
    def type(self):
        """
        Gets the type of this DataActionFormField.
        Type of field.

        :return: The type of this DataActionFormField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this DataActionFormField.
        Type of field.

        :param type: The type of this DataActionFormField.
        :type: str
        """
        self._type = type

    @property
    def default(self):
        """
        Gets the default of this DataActionFormField.
        Default value of the field.

        :return: The default of this DataActionFormField.
        :rtype: str
        """
        return self._default

    @default.setter
    def default(self, default):
        """
        Sets the default of this DataActionFormField.
        Default value of the field.

        :param default: The default of this DataActionFormField.
        :type: str
        """
        self._default = default

    @property
    def oauth_url(self):
        """
        Gets the oauth_url of this DataActionFormField.
        The URL for an oauth link, if type is 'oauth_link'.

        :return: The oauth_url of this DataActionFormField.
        :rtype: str
        """
        return self._oauth_url

    @oauth_url.setter
    def oauth_url(self, oauth_url):
        """
        Sets the oauth_url of this DataActionFormField.
        The URL for an oauth link, if type is 'oauth_link'.

        :param oauth_url: The oauth_url of this DataActionFormField.
        :type: str
        """
        self._oauth_url = oauth_url

    @property
    def required(self):
        """
        Gets the required of this DataActionFormField.
        Whether or not the field is required. This is a user-interface hint. A user interface displaying this form should not submit it without a value for this field. The action server must also perform this validation.

        :return: The required of this DataActionFormField.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this DataActionFormField.
        Whether or not the field is required. This is a user-interface hint. A user interface displaying this form should not submit it without a value for this field. The action server must also perform this validation.

        :param required: The required of this DataActionFormField.
        :type: bool
        """
        self._required = required

    @property
    def options(self):
        """
        Gets the options of this DataActionFormField.
        If the form type is 'select', a list of options to be selected from.

        :return: The options of this DataActionFormField.
        :rtype: list[DataActionFormSelectOption]
        """
        return self._options

    @options.setter
    def options(self, options):
        """
        Sets the options of this DataActionFormField.
        If the form type is 'select', a list of options to be selected from.

        :param options: The options of this DataActionFormField.
        :type: list[DataActionFormSelectOption]
        """
        self._options = options

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

