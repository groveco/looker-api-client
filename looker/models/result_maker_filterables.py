# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class ResultMakerFilterables(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        ResultMakerFilterables - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'model': 'str',
            'view': 'str',
            'name': 'str',
            'listen': 'list[ResultMakerFilterablesListen]',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'model': 'model',
            'view': 'view',
            'name': 'name',
            'listen': 'listen',
            'can': 'can'
        }

        self._model = None
        self._view = None
        self._name = None
        self._listen = None
        self._can = None

    @property
    def model(self):
        """
        Gets the model of this ResultMakerFilterables.
        The model this filterable comes from (used for field suggestions).

        :return: The model of this ResultMakerFilterables.
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """
        Sets the model of this ResultMakerFilterables.
        The model this filterable comes from (used for field suggestions).

        :param model: The model of this ResultMakerFilterables.
        :type: str
        """
        self._model = model

    @property
    def view(self):
        """
        Gets the view of this ResultMakerFilterables.
        The view this filterable comes from (used for field suggestions).

        :return: The view of this ResultMakerFilterables.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """
        Sets the view of this ResultMakerFilterables.
        The view this filterable comes from (used for field suggestions).

        :param view: The view of this ResultMakerFilterables.
        :type: str
        """
        self._view = view

    @property
    def name(self):
        """
        Gets the name of this ResultMakerFilterables.
        The name of the filterable thing (Query or Merged Results).

        :return: The name of this ResultMakerFilterables.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ResultMakerFilterables.
        The name of the filterable thing (Query or Merged Results).

        :param name: The name of this ResultMakerFilterables.
        :type: str
        """
        self._name = name

    @property
    def listen(self):
        """
        Gets the listen of this ResultMakerFilterables.
        array of dashboard_filter_name: and field: objects.

        :return: The listen of this ResultMakerFilterables.
        :rtype: list[ResultMakerFilterablesListen]
        """
        return self._listen

    @listen.setter
    def listen(self, listen):
        """
        Sets the listen of this ResultMakerFilterables.
        array of dashboard_filter_name: and field: objects.

        :param listen: The listen of this ResultMakerFilterables.
        :type: list[ResultMakerFilterablesListen]
        """
        self._listen = listen

    @property
    def can(self):
        """
        Gets the can of this ResultMakerFilterables.
        Operations the current user is able to perform on this object

        :return: The can of this ResultMakerFilterables.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this ResultMakerFilterables.
        Operations the current user is able to perform on this object

        :param can: The can of this ResultMakerFilterables.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

