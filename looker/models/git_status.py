# coding: utf-8

"""
Copyright 2016 SmartBear Software

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

    Ref: https://github.com/swagger-api/swagger-codegen
"""

from pprint import pformat
from six import iteritems


class GitStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self):
        """
        GitStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'action': 'str',
            'text': 'str',
            'revertable': 'bool',
            'conflict': 'bool',
            'can': 'dict(str, bool)'
        }

        self.attribute_map = {
            'action': 'action',
            'text': 'text',
            'revertable': 'revertable',
            'conflict': 'conflict',
            'can': 'can'
        }

        self._action = None
        self._text = None
        self._revertable = None
        self._conflict = None
        self._can = None

    @property
    def action(self):
        """
        Gets the action of this GitStatus.
        Git action: add, delete, etc

        :return: The action of this GitStatus.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """
        Sets the action of this GitStatus.
        Git action: add, delete, etc

        :param action: The action of this GitStatus.
        :type: str
        """
        self._action = action

    @property
    def text(self):
        """
        Gets the text of this GitStatus.
        Git description of the action

        :return: The text of this GitStatus.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """
        Sets the text of this GitStatus.
        Git description of the action

        :param text: The text of this GitStatus.
        :type: str
        """
        self._text = text

    @property
    def revertable(self):
        """
        Gets the revertable of this GitStatus.
        When true, the file can be reverted to an earlier state

        :return: The revertable of this GitStatus.
        :rtype: bool
        """
        return self._revertable

    @revertable.setter
    def revertable(self, revertable):
        """
        Sets the revertable of this GitStatus.
        When true, the file can be reverted to an earlier state

        :param revertable: The revertable of this GitStatus.
        :type: bool
        """
        self._revertable = revertable

    @property
    def conflict(self):
        """
        Gets the conflict of this GitStatus.
        When true, changes to the local file conflict with the remote repository

        :return: The conflict of this GitStatus.
        :rtype: bool
        """
        return self._conflict

    @conflict.setter
    def conflict(self, conflict):
        """
        Sets the conflict of this GitStatus.
        When true, changes to the local file conflict with the remote repository

        :param conflict: The conflict of this GitStatus.
        :type: bool
        """
        self._conflict = conflict

    @property
    def can(self):
        """
        Gets the can of this GitStatus.
        Operations the current user is able to perform on this object

        :return: The can of this GitStatus.
        :rtype: dict(str, bool)
        """
        return self._can

    @can.setter
    def can(self, can):
        """
        Sets the can of this GitStatus.
        Operations the current user is able to perform on this object

        :param can: The can of this GitStatus.
        :type: dict(str, bool)
        """
        self._can = can

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other

